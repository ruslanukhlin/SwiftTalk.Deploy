admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901

static_resources:
  listeners:
    - name: listener_http
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/authService/"
                          route:
                            cluster: auth_service
                            prefix_rewrite: "/"
                        - match:
                            prefix: "/postService/"
                          route:
                            cluster: post_service
                            prefix_rewrite: "/"
                http_filters:
                  - name: envoy.filters.http.jwt_authn
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                      providers:
                        my_jwt:
                          issuer: "auth-service"
                          audiences:
                            - "swift-talk"
                          from_headers:
                            - name: Authorization
                              value_prefix: "Bearer "
                          remote_jwks:
                            http_uri:
                              uri: "http://host.docker.internal:5002/.well-known/jwks.json"
                              cluster: auth_service
                              timeout: 5s
                            cache_duration: 300s
                          forward: true
                      rules:
                        - match:
                            prefix: "/postService/"
                          requires:
                            provider_name: "my_jwt"
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                      log_format:
                        text_format_source:
                          inline_string: "[%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\" \"%DOWNSTREAM_LOCAL_ADDRESS%\" \"%UPSTREAM_LOCAL_ADDRESS%\" \"%REQ(X-ENVOY-EXTERNAL-ADDRESS)%\" \"%UPSTREAM_TRANSPORT_FAILURE_REASON%\"\n"

  clusters:
    - name: auth_service
      type: STRICT_DNS
      connect_timeout: 5s
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: auth_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 5002

    - name: post_service
      type: STRICT_DNS
      connect_timeout: 5s
      dns_lookup_family: V4_ONLY
      load_assignment:
        cluster_name: post_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 5001 